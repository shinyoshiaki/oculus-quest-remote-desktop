{"version":3,"sources":["components/display/index.tsx","domain/media/index.ts","domain/webrtc/signaling.ts","pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["desktopRef","React","createRef","Display","_ref","onStream","useEffect","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","stream","wrap","_context","prev","next","Promise","resolve","navigator","getUserMedia","audio","video","mandatory","chromeMediaSource","minWidth","minHeight","sent","srcObject","stop","apply","this","arguments","init","react_default","createElement","ref","v","autoPlay","muted","socket","client","connect","create","roomId","trickle","rtc","WebRTC","nodeId","emit","on","data","console","log","setSdp","sdp","onSignal","subscribe","onConnect","once","unSubscribe","Cast","min","max","_useState","useState","Math","ceil","floor","random","toString","_useState2","slicedToArray","room","peer","addTrack","getVideoTracks","getAudioTracks","onData","msg","_x","display","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.372c46fc.chunk.js","sourcesContent":["import React, { FC, useEffect } from \"react\";\nimport { getScreen } from \"../../domain/media\";\n\ntype Props = { onStream: (stream: MediaStream) => void };\n\nlet desktopRef: any = React.createRef();\n\nconst Display: FC<Props> = ({ onStream }) => {\n  useEffect(() => {\n    const init = async () => {\n      const stream = await getScreen();\n      desktopRef.srcObject = stream;\n      onStream(stream);\n    };\n    init();\n  }, [onStream]);\n\n  return (\n    <div>\n      <p>display</p>\n      <video ref={v => (desktopRef = v)} autoPlay={true} muted={true} />\n    </div>\n  );\n};\n\nexport default Display;\n","export function getScreen() {\n  return new Promise<MediaStream>(resolve => {\n    const constraints: any = {\n      audio: false,\n      video: {\n        mandatory: {\n          chromeMediaSource: \"screen\",\n          minWidth: 1080,\n          minHeight: 1920\n        }\n      }\n    };\n    navigator.getUserMedia(constraints, stream => resolve(stream), () => {});\n  });\n}\n","import client from \"socket.io-client\";\nimport WebRTC from \"webrtc4me\";\n\nconst url = \"https://aqueous-earth-75182.herokuapp.com/\";\n\nconst socket = client.connect(url);\n\nexport function create(roomId: string, trickle: boolean) {\n  return new Promise<WebRTC>(resolve => {\n    const rtc = new WebRTC({ nodeId: \"answer\", trickle });\n    socket.emit(\"create\", { roomId });\n    socket.on(\"sdp\", (data: { sdp: string }) => {\n      console.log({ data });\n      rtc.setSdp(data.sdp);\n    });\n\n    const onSignal = rtc.onSignal.subscribe((sdp: any) => {\n      console.log({ sdp, roomId });\n      socket.emit(\"sdp\", { sdp, roomId });\n    });\n    rtc.onConnect.once(() => {\n      console.log(\"connect\");\n      onSignal.unSubscribe();\n      resolve(rtc);\n    });\n  });\n}\n\nexport function join(roomId: string, trickle: boolean) {\n  return new Promise<WebRTC>(resolve => {\n    const rtc = new WebRTC({ nodeId: \"offer\", trickle });\n    socket.emit(\"join\", { roomId });\n    socket.on(\"join\", () => {\n      rtc.makeOffer();\n    });\n    socket.on(\"sdp\", (data: { sdp: string }) => {\n      console.log({ data });\n      rtc.setSdp(data.sdp);\n    });\n\n    const onSignal = rtc.onSignal.subscribe(sdp => {\n      console.log({ sdp, roomId });\n      socket.emit(\"sdp\", { sdp, roomId });\n    });\n    rtc.onConnect.once(() => {\n      console.log(\"connect\");\n      resolve(rtc);\n      onSignal.unSubscribe();\n    });\n  });\n}\n","import React, { FC } from \"react\";\nimport Display from \"../components/display\";\nimport { create } from \"../domain/webrtc/signaling\";\nimport { useState } from \"react\";\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\nconst Cast: FC = () => {\n  const [room, setroom] = useState(getRandomInt(1000000, 10000000).toString());\n\n  const onStream = async (stream: MediaStream) => {\n    const peer = await create(room, false);\n    console.log({ stream });\n    peer.addTrack(stream.getVideoTracks()[0], stream);\n    peer.addTrack(stream.getAudioTracks()[0], stream);\n    peer.onData.subscribe((msg: any) => {});\n  };\n\n  return (\n    <div>\n      <p>pin code</p>\n      <p>{room}</p>\n      <Display onStream={onStream} />\n    </div>\n  );\n};\n\nexport default Cast;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}