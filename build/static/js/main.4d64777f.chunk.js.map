{"version":3,"sources":["domain/babylon/scene/index.tsx","services/webrtc/index.ts","domain/babylon/desktop/index.tsx","domain/babylon/vr/index.tsx","domain/babylon/keyboard/model.ts","redux/devices.ts","domain/babylon/keyboard/index.tsx","pages/App.tsx","hooks/useInput.tsx","hooks/useSelectorRef.tsx","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["SceneContext","createContext","undefined","SceneCreate","_ref","width","height","engineOptions","adaptToDeviceRatio","onSceneMount","children","_useState","useState","_useState2","Object","slicedToArray","context","setcontext","canvasRef","useRef","useEffect","canvas","current","engine","Engine","scene","Scene","ready","runRenderLoop","render","react_default","a","createElement","Provider","value","ref","webrtcService","rtc","url","roomId","trickle","_this","this","socket","client","connect","Promise","resolve","WebRTC","nodeId","emit","on","data","console","log","setSdp","sdp","onSignal","subscribe","onConnect","once","unSubscribe","_this2","makeOffer","Desktop","stream","ratio","onMount","useContext","asyncToGenerator","regenerator_default","mark","_callee","mouseMoveEvent","vertical","horizontal","desktop","mat","videoTexture","impact","_mat","wrap","_context","prev","next","Event","MeshBuilder","CreatePlane","position","Vector3","rotation","StandardMaterial","VideoTexture","CreateFromStreamAsync","sent","uScale","vScale","diffuseTexture","material","onPointerUp","video","play","Mesh","scaling","Texture","hasAlpha","onPointerDown","evt","pickResult","hit","_ref3","pickedPoint","x","y","y1","execute","stop","react","VRContext","VR","vrcontext","setvrcontext","cotrollerActionEvent","vrPositionEvent","environment","createDefaultEnvironment","groundYBias","setMainColor","Color3","FromHexString","vrHelper","createDefaultVRExperience","createDeviceOrientationCamera","enableTeleportation","floorMeshes","ground","onControllerMeshLoaded","add","webVRController","onSecondaryButtonStateChangedObservable","_","hand","pressed","onBeforeRenderObservable","pos","webVRCamera","devicePosition","clone","qua","deviceRotationQuaternion","props","keyboardAction","key","initialState","keyboardOpen","Keyboard","vrContext","dispatch","useDispatch","keyboardActionEvent","plane","isVisible","advancedTexture","AdvancedDynamicTexture","CreateForMesh","input","InputText","maxWidth","color","background","addControl","keyboard","VirtualKeyboard","CreateDefaultLayout","verticalAlignment","Control","VERTICAL_ALIGNMENT_BOTTOM","textBuffer","text","onTextChangedObservable","e","slice","currentKey","onBlurObservable","_ref2","_ref4","type","payload","asPromise","rotationQuaternion","translate","_x","apply","arguments","App","_useInput","setvalue","target","useInput","_useInput2","room","setroom","clearroom","setstream","keyboardOpenRef","selector","select","useSelector","useSelectorRef","store","devices","join","peer","onAddTrack","ms","srcObject","style","display","onChange","onClick","babylon_scene","HemisphericLight","FreeCamera","attachControl","activeCamera","beta","vr","send","JSON","stringify","babylon_keyboard","babylon_desktop","autoPlay","Boolean","window","location","hostname","match","rootReducer","combineReducers","state","length","action","objectSpread","reduxCreateStore","applyMiddleware","logger","ReactDOM","es","react_router_dom","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d64777f.chunk.js","sourcesContent":["import { Engine, Scene, EngineOptions } from \"@babylonjs/core\";\nimport React, { FC, useEffect, useRef, createContext, useState } from \"react\";\n\nexport const SceneContext = createContext<SceneEventArgs | undefined>(\n  undefined\n);\n\nexport type SceneEventArgs = {\n  engine: Engine;\n  scene: Scene;\n  canvas: HTMLCanvasElement;\n};\n\nexport type Props = {\n  engineOptions?: EngineOptions;\n  adaptToDeviceRatio?: boolean;\n  onSceneMount?: (args: SceneEventArgs) => void;\n  width?: number;\n  height?: number;\n};\n\nconst SceneCreate: FC<Props> = ({\n  width,\n  height,\n  engineOptions,\n  adaptToDeviceRatio,\n  onSceneMount,\n  children\n}) => {\n  const [context, setcontext] = useState<SceneEventArgs | undefined>();\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const engine = new Engine(\n        canvas,\n        true,\n        engineOptions,\n        adaptToDeviceRatio\n      );\n\n      const scene = new Scene(engine);\n\n      if (onSceneMount) {\n        const ready = {\n          scene,\n          engine,\n          canvas\n        };\n        onSceneMount(ready);\n        setcontext(ready);\n        engine.runRenderLoop(() => {\n          scene.render();\n        });\n      }\n    }\n  }, [canvasRef]);\n\n  return (\n    <div>\n      <SceneContext.Provider value={context}>\n        <canvas width={width} height={height} ref={canvasRef} />\n        {context && children}\n      </SceneContext.Provider>\n    </div>\n  );\n};\n\nexport default SceneCreate;\n","import client from \"socket.io-client\";\nimport WebRTC from \"webrtc4me\";\n\nclass WebRTCService {\n  private rtc?: WebRTC;\n\n  get peer() {\n    return this.rtc;\n  }\n\n  create(url: string, roomId: string, trickle: boolean) {\n    const socket = client.connect(url);\n    return new Promise<WebRTC>(resolve => {\n      const rtc = new WebRTC({ nodeId: \"answer\", trickle });\n      socket.emit(\"create\", { roomId });\n      socket.on(\"sdp\", (data: { sdp: string }) => {\n        console.log({ data });\n        rtc.setSdp(data.sdp);\n      });\n\n      const onSignal = rtc.onSignal.subscribe(sdp => {\n        console.log({ sdp, roomId });\n        socket.emit(\"sdp\", { sdp, roomId });\n      });\n      rtc.onConnect.once(() => {\n        console.log(\"connect\");\n        onSignal.unSubscribe();\n        resolve(rtc);\n      });\n      this.rtc = rtc;\n    });\n  }\n\n  join(url: string, roomId: string, trickle: boolean) {\n    const socket = client.connect(url);\n    return new Promise<WebRTC>(resolve => {\n      const rtc = new WebRTC({ nodeId: \"offer\", trickle });\n      socket.emit(\"join\", { roomId });\n      socket.on(\"join\", () => {\n        rtc.makeOffer();\n      });\n      socket.on(\"sdp\", (data: { sdp: string }) => {\n        console.log({ data });\n        rtc.setSdp(data.sdp);\n      });\n\n      const onSignal = rtc.onSignal.subscribe(sdp => {\n        console.log({ sdp, roomId });\n        socket.emit(\"sdp\", { sdp, roomId });\n      });\n      rtc.onConnect.once(() => {\n        console.log(\"connect\");\n        resolve(rtc);\n        onSignal.unSubscribe();\n      });\n      this.rtc = rtc;\n    });\n  }\n}\n\nconst webrtcService = new WebRTCService();\n\nexport { webrtcService };\n","import { SceneContext } from \"../scene\";\nimport Event from \"rx.mini\";\nimport React, { FC, Fragment, useContext, useEffect } from \"react\";\nimport {\n  MeshBuilder,\n  Vector3,\n  StandardMaterial,\n  VideoTexture,\n  Mesh,\n  Texture\n} from \"@babylonjs/core\";\n\nexport type OnDesktopMountProps = {\n  mouseMoveEvent: Event<{ x: number; y: number }>;\n};\n\nconst Desktop: FC<{\n  stream: MediaStream;\n  onMount?: (props: OnDesktopMountProps) => void;\n  ratio?: { vertical: number; horizontal: number };\n}> = ({ stream, ratio, onMount }) => {\n  const context = useContext(SceneContext);\n\n  useEffect(() => {\n    (async () => {\n      if (context) {\n        const mouseMoveEvent = new Event<{ x: number; y: number }>();\n\n        const { scene } = context;\n        const vertical = ratio ? ratio.vertical : 2;\n        const horizontal = ratio ? ratio.horizontal : 1.7 * 2;\n\n        console.log({ stream });\n\n        const desktop = MeshBuilder.CreatePlane(\n          \"desktop\",\n          { width: horizontal, height: vertical },\n          scene as any\n        );\n        desktop.position = new Vector3(0, vertical / 2, 0);\n        desktop.rotation = new Vector3(0, 0, 0);\n\n        const mat = new StandardMaterial(\"mat\", scene as any);\n\n        const videoTexture = await VideoTexture.CreateFromStreamAsync(\n          scene as any,\n          stream\n        );\n\n        videoTexture.uScale = 1;\n        videoTexture.vScale = -1;\n\n        mat.diffuseTexture = videoTexture;\n        desktop.material = mat;\n\n        scene.onPointerUp = () => {\n          videoTexture.video.play();\n        };\n\n        {\n          const impact = Mesh.CreatePlane(\"impact\", 1, scene as any);\n          const mat = (impact.material = new StandardMaterial(\n            \"impactMat\",\n            scene as any\n          ));\n          impact.scaling = new Vector3(0.02, 0.02, 0.04);\n          mat.diffuseTexture = new Texture(\"textures/impact.png\", scene as any);\n          mat.diffuseTexture!.hasAlpha = true;\n          impact.position = new Vector3(0, 0, -0.01);\n\n          scene.onPointerDown = function(evt, pickResult) {\n            if (pickResult.hit) {\n              const { x, y } = pickResult!.pickedPoint!;\n              if (-1.7 < x && x < 1.7) impact.position.x = x;\n              if (0 < y && y < 2) impact.position.y = y;\n              const y1 = y / vertical;\n              mouseMoveEvent.execute({ x: (x + 1.7) / horizontal, y: 1 - y1 });\n            }\n          };\n        }\n\n        if (onMount) onMount({ mouseMoveEvent });\n      }\n    })();\n  }, [context]);\n\n  return <Fragment />;\n};\n\nexport default Desktop;\n","import React, {\n  FC,\n  useContext,\n  useEffect,\n  useState,\n  createContext\n} from \"react\";\nimport { SceneContext } from \"../scene\";\nimport { Color3 } from \"@babylonjs/core\";\nimport Event from \"rx.mini\";\nimport { ControllerAction, VrPosition } from \"./model\";\n\nexport type OnMountProps = {\n  cotrollerActionEvent: Event<ControllerAction>;\n  vrPositionEvent: Event<VrPosition>;\n};\n\nexport const VRContext = createContext<OnMountProps | undefined>(undefined);\n\nconst VR: FC<{\n  onMount?: (props: OnMountProps) => void;\n}> = ({ onMount, children }) => {\n  const context = useContext(SceneContext);\n\n  const [vrcontext, setvrcontext] = useState<OnMountProps | undefined>();\n\n  useEffect(() => {\n    if (context) {\n      const cotrollerActionEvent = new Event<ControllerAction>();\n      const vrPositionEvent = new Event<VrPosition>();\n\n      const { scene } = context;\n\n      const environment = scene.createDefaultEnvironment({\n        groundYBias: 1\n      })!;\n      environment!.setMainColor(Color3.FromHexString(\"#74b9ff\"));\n\n      const vrHelper = scene.createDefaultVRExperience({\n        createDeviceOrientationCamera: false\n      });\n      vrHelper.enableTeleportation({ floorMeshes: [environment.ground!] });\n\n      vrHelper.onControllerMeshLoaded.add(webVRController => {\n        webVRController.onSecondaryButtonStateChangedObservable.add(\n          (data, _) => {\n            const hand = webVRController.hand;\n            if (hand === \"right\" || hand === \"left\") {\n              if (data.pressed) {\n                if (cotrollerActionEvent)\n                  cotrollerActionEvent.execute({ hand });\n              }\n            }\n          }\n        );\n      });\n      scene.onBeforeRenderObservable.add(() => {\n        const pos = vrHelper.webVRCamera.devicePosition.clone();\n        const qua = vrHelper.webVRCamera.deviceRotationQuaternion.clone();\n        vrPositionEvent.execute({ pos, qua });\n      });\n\n      const props = { cotrollerActionEvent, vrPositionEvent };\n      if (onMount) onMount(props);\n\n      setvrcontext(props);\n    }\n  }, [context]);\n\n  return (\n    <VRContext.Provider value={vrcontext}>\n      {vrcontext && children}\n    </VRContext.Provider>\n  );\n};\n\nexport default VR;\n","export const keyboardAction = (key: string) => ({ key });\n\nexport type KeyboardAction = ReturnType<typeof keyboardAction>;\n","export type StateDevices = { keyboardOpen: boolean };\n\nconst initialState: StateDevices = { keyboardOpen: false };\n\nexport const keyboardSwitch = (b: boolean) => ({\n  type: \"devices_keyboardSwitch\" as const,\n  payload: b\n});\n\ntype Actions = ReturnType<typeof keyboardSwitch>;\n\nexport default function reducer(\n  state = initialState,\n  action: Actions\n): StateDevices {\n  switch (action.type) {\n    case \"devices_keyboardSwitch\":\n      return { ...state, keyboardOpen: action.payload };\n    default:\n      return state;\n  }\n}\n","import React, { FC, useContext, Fragment, useEffect } from \"react\";\nimport { SceneContext } from \"../scene\";\nimport {\n  AdvancedDynamicTexture,\n  InputText,\n  VirtualKeyboard,\n  Control\n} from \"@babylonjs/gui\";\nimport { MeshBuilder, Vector3 } from \"@babylonjs/core\";\nimport { VRContext } from \"../vr\";\nimport Event from \"rx.mini\";\nimport { keyboardAction, KeyboardAction } from \"./model\";\nimport { useDispatch } from \"react-redux\";\nimport { keyboardSwitch } from \"../../../redux/devices\";\n\nexport type OnKeyboardMountProps = {\n  keyboardActionEvent: Event<KeyboardAction>;\n};\n\nconst Keyboard: FC<{\n  onMount?: (props: OnKeyboardMountProps) => void;\n}> = ({ onMount }) => {\n  const context = useContext(SceneContext);\n  const vrContext = useContext(VRContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (context && vrContext) {\n      const keyboardActionEvent = new Event<KeyboardAction>();\n\n      const { scene } = context;\n      const { cotrollerActionEvent, vrPositionEvent } = vrContext;\n\n      const plane = MeshBuilder.CreatePlane(\n        \"ui\",\n        { width: 1, height: 1 },\n        scene as any\n      );\n      plane.isVisible = false;\n\n      const advancedTexture = AdvancedDynamicTexture.CreateForMesh(\n        plane,\n        1024,\n        1024\n      );\n\n      const input = new InputText();\n      input.width = 0.2;\n      input.maxWidth = 0.2;\n      input.height = \"40px\";\n      input.color = \"white\";\n      input.background = \"green\";\n      advancedTexture.addControl(input);\n\n      const keyboard = VirtualKeyboard.CreateDefaultLayout();\n      keyboard.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\n      advancedTexture.addControl(keyboard);\n\n      keyboard.connect(input);\n\n      let textBuffer = input.text;\n      input.onTextChangedObservable.add(e => {\n        console.log({ e }, input.text);\n\n        if (input.text === textBuffer.slice(0, -1)) {\n          console.log(\"back\");\n          keyboardActionEvent.execute(keyboardAction(\"backspace\"));\n        } else {\n          keyboardActionEvent.execute(keyboardAction(e.currentKey));\n        }\n        textBuffer = input.text;\n      });\n\n      input.onBlurObservable.add(() => {\n        keyboardActionEvent.execute(keyboardAction(\"enter\"));\n        input.text = \"\";\n      });\n\n      cotrollerActionEvent.subscribe(async ({ hand }) => {\n        if (hand === \"left\") {\n          plane.isVisible = !plane.isVisible;\n          dispatch(keyboardSwitch(plane.isVisible));\n          const { pos, qua } = await vrPositionEvent.asPromise();\n          plane.position = pos;\n          plane.rotationQuaternion = qua;\n          plane.translate(new Vector3(0, 0, 0.6), 1);\n        }\n      });\n\n      if (onMount) onMount({ keyboardActionEvent });\n    }\n  }, [context]);\n\n  return <Fragment />;\n};\n\nexport default Keyboard;\n","import React, { useRef, useState, FC, useEffect } from \"react\";\n\nimport SceneCreate, { SceneEventArgs } from \"../domain/babylon/scene\";\nimport { Vector3, HemisphericLight, FreeCamera } from \"@babylonjs/core\";\nimport useInput from \"../hooks/useInput\";\nimport { webrtcService } from \"../services/webrtc\";\nimport Desktop, { OnDesktopMountProps } from \"../domain/babylon/desktop\";\nimport VR, { OnMountProps } from \"../domain/babylon/vr\";\nimport Keyboard, { OnKeyboardMountProps } from \"../domain/babylon/keyboard\";\nimport { useSelector } from \"react-redux\";\nimport { ReduxState } from \"../redux\";\nimport useSelectorRef from \"../hooks/useSelectorRef\";\n\nconst App: FC = () => {\n  const [room, setroom, clearroom] = useInput();\n  const ref = useRef<any>();\n  const [stream, setstream] = useState<MediaStream>();\n\n  const onSceneMount = (e: SceneEventArgs) => {\n    const { canvas, scene } = e;\n\n    new HemisphericLight(\"sunLight\", new Vector3(0, 1, 0), scene);\n\n    const camera = new FreeCamera(\"camera\", new Vector3(0, 1, -2), scene);\n    camera.attachControl(canvas, true);\n    (scene.activeCamera as any).beta += 0.8;\n  };\n\n  const keyboardOpenRef = useSelectorRef(\n    (store: ReduxState) => store.devices.keyboardOpen\n  );\n\n  const onDesktopMount = (props: OnDesktopMountProps) => {\n    const { mouseMoveEvent } = props;\n    mouseMoveEvent.subscribe(pos => {\n      console.log(\"ref\", keyboardOpenRef.current);\n      if (webrtcService.peer && !keyboardOpenRef.current)\n        webrtcService.peer.send(JSON.stringify({ type: \"move\", payload: pos }));\n    });\n  };\n\n  const connect = async () => {\n    await webrtcService.join(\n      \"https://aqueous-earth-75182.herokuapp.com/\",\n      room,\n      false\n    );\n    clearroom();\n    if (webrtcService.peer)\n      webrtcService.peer.onAddTrack.subscribe(ms => {\n        setstream(ms);\n        console.log(ms);\n        ref.current.srcObject = ms;\n      });\n  };\n\n  const onVRMount = (props: OnMountProps) => {\n    const { cotrollerActionEvent } = props;\n    cotrollerActionEvent.subscribe(({ hand }) => {\n      if (webrtcService.peer && hand === \"right\" && !keyboardOpenRef.current)\n        webrtcService.peer.send(JSON.stringify({ type: \"click\" }));\n    });\n  };\n\n  const onKeyboardMount = (props: OnKeyboardMountProps) => {\n    const { keyboardActionEvent } = props;\n    keyboardActionEvent.subscribe(({ key }) => {\n      if (webrtcService.peer)\n        webrtcService.peer.send(JSON.stringify({ type: \"key\", payload: key }));\n    });\n  };\n\n  return (\n    <div>\n      <div style={{ display: \"flex\" }}>\n        <input onChange={setroom} value={room} />\n        <button onClick={connect}>connect</button>\n      </div>\n\n      <SceneCreate onSceneMount={onSceneMount} height={400} width={600}>\n        <VR onMount={onVRMount}>\n          <Keyboard onMount={onKeyboardMount} />\n        </VR>\n        {stream && (\n          <Desktop\n            stream={stream}\n            ratio={{\n              vertical: 2,\n              horizontal: 2 * 1.7\n            }}\n            onMount={onDesktopMount}\n          />\n        )}\n      </SceneCreate>\n      <video ref={ref} autoPlay={true} width={100} height={100} />\n    </div>\n  );\n};\n\nexport default App;\n","import { useState } from \"react\";\n\nexport default function useInput(): [string, (set: any) => void, () => void] {\n  const [value, setvalue] = useState(\"\");\n  const input = (e: any) => {\n    setvalue(e.target.value);\n  };\n  const clear = () => {\n    setvalue(\"\");\n  };\n\n  return [value, input, clear];\n}\n","import { useSelector } from \"react-redux\";\nimport { useRef, useEffect } from \"react\";\n\nexport default function useSelectorRef<T>(selector: (state: any) => T) {\n  const ref = useRef<T>();\n  const select = useSelector(selector);\n  useEffect(() => {\n    ref.current = select;\n  }, [select]);\n  return ref;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createStore as reduxCreateStore,\n  applyMiddleware,\n  combineReducers\n} from \"redux\";\nimport logger from \"redux-logger\";\nimport devices, { StateDevices } from \"./devices\";\n\nconst rootReducer = combineReducers({ devices });\n\nexport default function createStore() {\n  const store = reduxCreateStore(rootReducer, applyMiddleware(logger));\n  return store;\n}\n\nexport interface ReduxState {\n  devices: StateDevices;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport createStore from \"./redux\";\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <div>\n        <Route exact path=\"/\" component={App} />\n      </div>\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}