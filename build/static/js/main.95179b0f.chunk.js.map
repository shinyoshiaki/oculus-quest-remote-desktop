{"version":3,"sources":["components/scene/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Scene","scene","engine","canvas","onResizeWindow","_this","resize","onCanvasLoaded","c","this","BABYLON","props","engineOptions","adaptToDeviceRatio","onSceneMount","console","error","window","addEventListener","removeEventListener","_this$props","width","height","opts","Object","objectWithoutProperties","undefined","react_default","a","createElement","assign","ref","React","Component","PageWithScene","_callee","e","sphere","light","environment","shadowGenerator","regenerator_default","wrap","_context","prev","next","CreateIcoSphere","radius","flat","subdivisions","position","y","material","Math","PI","attachControl","activeCamera","beta","createDefaultEnvironment","enableGroundShadow","groundYBias","setMainColor","FromHexString","useBlurExponentialShadowMap","blurKernel","addShadowCaster","createDefaultVRExperience","createDeviceOrientationCamera","enableTeleportation","floorMeshes","ground","onBeforeRenderObservable","add","rotation","getEngine","getDeltaTime","x","runRenderLoop","render","stop","scene_Scene","Boolean","location","hostname","match","ReactDOM","App_PageWithScene","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95179b0f.chunk.js","sourcesContent":["import * as BABYLON from \"babylonjs\";\nimport React from \"react\";\n\nexport type SceneEventArgs = {\n  engine: BABYLON.Engine;\n  scene: BABYLON.Scene;\n  canvas: HTMLCanvasElement;\n};\n\nexport type SceneProps = {\n  engineOptions?: BABYLON.EngineOptions;\n  adaptToDeviceRatio?: boolean;\n  onSceneMount?: (args: SceneEventArgs) => void;\n  width?: number;\n  height?: number;\n};\n\nexport default class Scene extends React.Component<\n  SceneProps & React.HTMLAttributes<HTMLCanvasElement>,\n  {}\n> {\n  private scene: BABYLON.Scene = {} as any;\n  private engine: BABYLON.Engine = {} as any;\n  private canvas: HTMLCanvasElement = {} as any;\n\n  onResizeWindow = () => {\n    if (this.engine) {\n      this.engine.resize();\n    }\n  };\n\n  componentDidMount() {\n    this.engine = new BABYLON.Engine(\n      this.canvas,\n      true,\n      this.props.engineOptions,\n      this.props.adaptToDeviceRatio\n    );\n\n    let scene = new BABYLON.Scene(this.engine);\n    this.scene = scene;\n\n    if (typeof this.props.onSceneMount === \"function\") {\n      this.props.onSceneMount({\n        scene,\n        engine: this.engine,\n        canvas: this.canvas\n      });\n    } else {\n      console.error(\"onSceneMount function not available\");\n    }\n\n    // Resize the babylon engine when the window is resized\n    window.addEventListener(\"resize\", this.onResizeWindow);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.onResizeWindow);\n  }\n\n  onCanvasLoaded = (c: HTMLCanvasElement) => {\n    if (c !== null) {\n      this.canvas = c;\n    }\n  };\n\n  render() {\n    // 'rest' can contain additional properties that you can flow through to canvas:\n    // (id, className, etc.)\n    let { width, height, ...rest } = this.props;\n\n    let opts: any = {};\n\n    if (width !== undefined && height !== undefined) {\n      opts.width = width;\n      opts.height = height;\n    }\n\n    return <canvas {...opts} ref={this.onCanvasLoaded} />;\n  }\n}\n","import React from \"react\";\nimport * as BABYLON from \"babylonjs\";\nimport BabylonScene, { SceneEventArgs } from \"./components/scene\"; // import the component above linking to file we just created.\n\nexport default class PageWithScene extends React.Component<{}, {}> {\n  onSceneMount = async (e: SceneEventArgs) => {\n    const { canvas, scene, engine } = e;\n\n    // Create simple sphere\n    const sphere = BABYLON.Mesh.CreateIcoSphere(\n      \"sphere\",\n      { radius: 0.2, flat: true, subdivisions: 1 },\n      scene\n    );\n    sphere.position.y = 3;\n    sphere.material = new BABYLON.StandardMaterial(\"sphere material\", scene);\n\n    // Lights and camera\n    var light = new BABYLON.DirectionalLight(\n      \"light\",\n      new BABYLON.Vector3(0, -0.5, 1.0),\n      scene\n    );\n    light.position = new BABYLON.Vector3(0, 5, -2);\n    var camera = new BABYLON.ArcRotateCamera(\n      \"camera\",\n      -Math.PI / 2,\n      Math.PI / 4,\n      3,\n      new BABYLON.Vector3(0, 3, 0),\n      scene\n    );\n    camera.attachControl(canvas, true);\n    (scene.activeCamera as any).beta += 0.8;\n\n    // Default Environment\n    var environment = scene.createDefaultEnvironment({\n      enableGroundShadow: true,\n      groundYBias: 1\n    });\n    environment!.setMainColor(BABYLON.Color3.FromHexString(\"#74b9ff\"));\n\n    // Shadows\n    var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\n    shadowGenerator.useBlurExponentialShadowMap = true;\n    shadowGenerator.blurKernel = 32;\n    shadowGenerator.addShadowCaster(sphere, true);\n\n    // Enable VR\n    var vrHelper = scene.createDefaultVRExperience({\n      createDeviceOrientationCamera: false\n    });\n    vrHelper.enableTeleportation({ floorMeshes: [environment!.ground!] });\n\n    // Runs every frame to rotate the sphere\n    scene.onBeforeRenderObservable.add(() => {\n      sphere.rotation.y += 0.0001 * scene.getEngine().getDeltaTime();\n      sphere.rotation.x += 0.0001 * scene.getEngine().getDeltaTime();\n    });\n\n    engine.runRenderLoop(() => {\n      if (scene) {\n        scene.render();\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <BabylonScene\n          onSceneMount={this.onSceneMount}\n          height={720}\n          width={1280}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}