{"version":3,"sources":["domain/babylon/scene/index.tsx","services/webrtc/index.ts","domain/babylon/desktop/index.tsx","domain/babylon/vr/index.tsx","domain/babylon/keyboard/model.ts","redux/devices.ts","domain/babylon/keyboard/index.tsx","pages/App.tsx","hooks/useInput.tsx","hooks/useSelectorRef.tsx","serviceWorker.ts","redux/index.ts","index.tsx"],"names":["SceneContext","createContext","undefined","SceneCreate","_ref","width","height","engineOptions","adaptToDeviceRatio","onSceneMount","children","_useState","useState","_useState2","Object","slicedToArray","context","setcontext","canvasRef","useRef","useEffect","canvas","current","engine","Engine","scene","Scene","ready","runRenderLoop","render","react_default","a","createElement","Provider","value","ref","webrtcService","rtc","url","roomId","trickle","_this","this","socket","client","connect","Promise","resolve","WebRTC","nodeId","emit","on","data","console","log","setSdp","sdp","onSignal","subscribe","onConnect","once","unSubscribe","_this2","makeOffer","Desktop","stream","ratio","onMount","useContext","asyncToGenerator","regenerator_default","mark","_callee","mouseMoveEvent","vertical","horizontal","desktop","mat","videoTexture","impact","_mat","wrap","_context","prev","next","Event","MeshBuilder","CreatePlane","position","Vector3","rotation","StandardMaterial","VideoTexture","CreateFromStreamAsync","sent","uScale","vScale","diffuseTexture","material","onPointerUp","video","play","Mesh","scaling","Texture","hasAlpha","onPointerDown","evt","pickResult","hit","_ref3","pickedPoint","x","y","y1","execute","stop","react","VRContext","VR","vrcontext","setvrcontext","cotrollerActionEvent","vrPositionEvent","environment","createDefaultEnvironment","groundYBias","setMainColor","Color3","FromHexString","vrHelper","createDefaultVRExperience","createDeviceOrientationCamera","enableTeleportation","floorMeshes","ground","onControllerMeshLoaded","add","webVRController","onSecondaryButtonStateChangedObservable","_","hand","pressed","onBeforeRenderObservable","pos","webVRCamera","devicePosition","clone","qua","deviceRotationQuaternion","props","keyboardAction","key","initialState","keyboardOpen","keyboardSwitch","b","type","payload","Keyboard","vrContext","dispatch","useDispatch","keyboardActionEvent","plane","isVisible","advancedTexture","AdvancedDynamicTexture","CreateForMesh","input","InputText","maxWidth","color","background","addControl","keyboard","VirtualKeyboard","CreateDefaultLayout","verticalAlignment","Control","VERTICAL_ALIGNMENT_BOTTOM","textBuffer","text","onTextChangedObservable","e","slice","currentKey","onBlurObservable","_ref2","_ref4","asPromise","rotationQuaternion","translate","_x","apply","arguments","App","_useInput","setvalue","target","useInput","_useInput2","room","setroom","clearroom","setstream","keyboardOpenRef","selector","select","useSelector","useSelectorRef","store","devices","join","peer","onAddTrack","ms","srcObject","style","display","onChange","onClick","babylon_scene","HemisphericLight","FreeCamera","attachControl","activeCamera","beta","vr","send","JSON","stringify","babylon_keyboard","babylon_desktop","autoPlay","Boolean","window","location","hostname","match","rootReducer","combineReducers","state","length","action","objectSpread","reduxCreateStore","applyMiddleware","logger","ReactDOM","es","react_router_dom","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.027bf6ad.chunk.js","sourcesContent":["import { Engine, Scene, EngineOptions } from \"@babylonjs/core\";\r\nimport React, { FC, useEffect, useRef, createContext, useState } from \"react\";\r\n\r\nexport const SceneContext = createContext<SceneEventArgs | undefined>(\r\n  undefined\r\n);\r\n\r\nexport type SceneEventArgs = {\r\n  engine: Engine;\r\n  scene: Scene;\r\n  canvas: HTMLCanvasElement;\r\n};\r\n\r\nexport type Props = {\r\n  engineOptions?: EngineOptions;\r\n  adaptToDeviceRatio?: boolean;\r\n  onSceneMount?: (args: SceneEventArgs) => void;\r\n  width?: number;\r\n  height?: number;\r\n};\r\n\r\nconst SceneCreate: FC<Props> = ({\r\n  width,\r\n  height,\r\n  engineOptions,\r\n  adaptToDeviceRatio,\r\n  onSceneMount,\r\n  children\r\n}) => {\r\n  const [context, setcontext] = useState<SceneEventArgs | undefined>();\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const engine = new Engine(\r\n        canvas,\r\n        true,\r\n        engineOptions,\r\n        adaptToDeviceRatio\r\n      );\r\n\r\n      const scene = new Scene(engine);\r\n\r\n      if (onSceneMount) {\r\n        const ready = {\r\n          scene,\r\n          engine,\r\n          canvas\r\n        };\r\n        onSceneMount(ready);\r\n        setcontext(ready);\r\n        engine.runRenderLoop(() => {\r\n          scene.render();\r\n        });\r\n      }\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  return (\r\n    <div>\r\n      <SceneContext.Provider value={context}>\r\n        <canvas width={width} height={height} ref={canvasRef} />\r\n        {context && children}\r\n      </SceneContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SceneCreate;\r\n","import client from \"socket.io-client\";\r\nimport WebRTC from \"webrtc4me\";\r\n\r\nclass WebRTCService {\r\n  private rtc?: WebRTC;\r\n\r\n  get peer() {\r\n    return this.rtc;\r\n  }\r\n\r\n  create(url: string, roomId: string, trickle: boolean) {\r\n    const socket = client.connect(url);\r\n    return new Promise<WebRTC>(resolve => {\r\n      const rtc = new WebRTC({ nodeId: \"answer\", trickle });\r\n      socket.emit(\"create\", { roomId });\r\n      socket.on(\"sdp\", (data: { sdp: string }) => {\r\n        console.log({ data });\r\n        rtc.setSdp(data.sdp);\r\n      });\r\n\r\n      const onSignal = rtc.onSignal.subscribe(sdp => {\r\n        console.log({ sdp, roomId });\r\n        socket.emit(\"sdp\", { sdp, roomId });\r\n      });\r\n      rtc.onConnect.once(() => {\r\n        console.log(\"connect\");\r\n        onSignal.unSubscribe();\r\n        resolve(rtc);\r\n      });\r\n      this.rtc = rtc;\r\n    });\r\n  }\r\n\r\n  join(url: string, roomId: string, trickle: boolean) {\r\n    const socket = client.connect(url);\r\n    return new Promise<WebRTC>(resolve => {\r\n      const rtc = new WebRTC({ nodeId: \"offer\", trickle });\r\n      socket.emit(\"join\", { roomId });\r\n      socket.on(\"join\", () => {\r\n        rtc.makeOffer();\r\n      });\r\n      socket.on(\"sdp\", (data: { sdp: string }) => {\r\n        console.log({ data });\r\n        rtc.setSdp(data.sdp);\r\n      });\r\n\r\n      const onSignal = rtc.onSignal.subscribe(sdp => {\r\n        console.log({ sdp, roomId });\r\n        socket.emit(\"sdp\", { sdp, roomId });\r\n      });\r\n      rtc.onConnect.once(() => {\r\n        console.log(\"connect\");\r\n        resolve(rtc);\r\n        onSignal.unSubscribe();\r\n      });\r\n      this.rtc = rtc;\r\n    });\r\n  }\r\n}\r\n\r\nconst webrtcService = new WebRTCService();\r\n\r\nexport { webrtcService };\r\n","import { SceneContext } from \"../scene\";\r\nimport Event from \"rx.mini\";\r\nimport React, { FC, Fragment, useContext, useEffect } from \"react\";\r\nimport {\r\n  MeshBuilder,\r\n  Vector3,\r\n  StandardMaterial,\r\n  VideoTexture,\r\n  Mesh,\r\n  Texture\r\n} from \"@babylonjs/core\";\r\n\r\nexport type OnDesktopMountProps = {\r\n  mouseMoveEvent: Event<{ x: number; y: number }>;\r\n};\r\n\r\nconst Desktop: FC<{\r\n  stream: MediaStream;\r\n  onMount?: (props: OnDesktopMountProps) => void;\r\n  ratio?: { vertical: number; horizontal: number };\r\n}> = ({ stream, ratio, onMount }) => {\r\n  const context = useContext(SceneContext);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (context) {\r\n        const mouseMoveEvent = new Event<{ x: number; y: number }>();\r\n\r\n        const { scene } = context;\r\n        const vertical = ratio ? ratio.vertical : 2;\r\n        const horizontal = ratio ? ratio.horizontal : 1.7 * 2;\r\n\r\n        console.log({ stream });\r\n\r\n        const desktop = MeshBuilder.CreatePlane(\r\n          \"desktop\",\r\n          { width: horizontal, height: vertical },\r\n          scene as any\r\n        );\r\n        desktop.position = new Vector3(0, vertical / 2, 0);\r\n        desktop.rotation = new Vector3(0, 0, 0);\r\n\r\n        const mat = new StandardMaterial(\"mat\", scene as any);\r\n\r\n        const videoTexture = await VideoTexture.CreateFromStreamAsync(\r\n          scene as any,\r\n          stream\r\n        );\r\n\r\n        videoTexture.uScale = 1;\r\n        videoTexture.vScale = -1;\r\n\r\n        mat.diffuseTexture = videoTexture;\r\n        desktop.material = mat;\r\n\r\n        scene.onPointerUp = () => {\r\n          videoTexture.video.play();\r\n        };\r\n\r\n        {\r\n          const impact = Mesh.CreatePlane(\"impact\", 1, scene as any);\r\n          const mat = (impact.material = new StandardMaterial(\r\n            \"impactMat\",\r\n            scene as any\r\n          ));\r\n          impact.scaling = new Vector3(0.02, 0.02, 0.04);\r\n          mat.diffuseTexture = new Texture(\"textures/impact.png\", scene as any);\r\n          mat.diffuseTexture!.hasAlpha = true;\r\n          impact.position = new Vector3(0, 0, -0.01);\r\n\r\n          scene.onPointerDown = function(evt, pickResult) {\r\n            if (pickResult.hit) {\r\n              const { x, y } = pickResult!.pickedPoint!;\r\n              if (-1.7 < x && x < 1.7) impact.position.x = x;\r\n              if (0 < y && y < 2) impact.position.y = y;\r\n              const y1 = y / vertical;\r\n              mouseMoveEvent.execute({ x: (x + 1.7) / horizontal, y: 1 - y1 });\r\n            }\r\n          };\r\n        }\r\n\r\n        if (onMount) onMount({ mouseMoveEvent });\r\n      }\r\n    })();\r\n  }, [context]);\r\n\r\n  return <Fragment />;\r\n};\r\n\r\nexport default Desktop;\r\n","import React, {\r\n  FC,\r\n  useContext,\r\n  useEffect,\r\n  useState,\r\n  createContext\r\n} from \"react\";\r\nimport { SceneContext } from \"../scene\";\r\nimport { Color3 } from \"@babylonjs/core\";\r\nimport Event from \"rx.mini\";\r\nimport { ControllerAction, VrPosition } from \"./model\";\r\n\r\nexport type OnMountProps = {\r\n  cotrollerActionEvent: Event<ControllerAction>;\r\n  vrPositionEvent: Event<VrPosition>;\r\n};\r\n\r\nexport const VRContext = createContext<OnMountProps | undefined>(undefined);\r\n\r\nconst VR: FC<{\r\n  onMount?: (props: OnMountProps) => void;\r\n}> = ({ onMount, children }) => {\r\n  const context = useContext(SceneContext);\r\n\r\n  const [vrcontext, setvrcontext] = useState<OnMountProps | undefined>();\r\n\r\n  useEffect(() => {\r\n    if (context) {\r\n      const cotrollerActionEvent = new Event<ControllerAction>();\r\n      const vrPositionEvent = new Event<VrPosition>();\r\n\r\n      const { scene } = context;\r\n\r\n      const environment = scene.createDefaultEnvironment({\r\n        groundYBias: 1\r\n      })!;\r\n      environment!.setMainColor(Color3.FromHexString(\"#74b9ff\"));\r\n\r\n      const vrHelper = scene.createDefaultVRExperience({\r\n        createDeviceOrientationCamera: false\r\n      });\r\n      vrHelper.enableTeleportation({ floorMeshes: [environment.ground!] });\r\n\r\n      vrHelper.onControllerMeshLoaded.add(webVRController => {\r\n        webVRController.onSecondaryButtonStateChangedObservable.add(\r\n          (data, _) => {\r\n            const hand = webVRController.hand;\r\n            if (hand === \"right\" || hand === \"left\") {\r\n              if (data.pressed) {\r\n                if (cotrollerActionEvent)\r\n                  cotrollerActionEvent.execute({ hand });\r\n              }\r\n            }\r\n          }\r\n        );\r\n      });\r\n      scene.onBeforeRenderObservable.add(() => {\r\n        const pos = vrHelper.webVRCamera.devicePosition.clone();\r\n        const qua = vrHelper.webVRCamera.deviceRotationQuaternion.clone();\r\n        vrPositionEvent.execute({ pos, qua });\r\n      });\r\n\r\n      const props = { cotrollerActionEvent, vrPositionEvent };\r\n      if (onMount) onMount(props);\r\n\r\n      setvrcontext(props);\r\n    }\r\n  }, [context]);\r\n\r\n  return (\r\n    <VRContext.Provider value={vrcontext}>\r\n      {vrcontext && children}\r\n    </VRContext.Provider>\r\n  );\r\n};\r\n\r\nexport default VR;\r\n","export const keyboardAction = (key: string) => ({ key });\r\n\r\nexport type KeyboardAction = ReturnType<typeof keyboardAction>;\r\n","export type StateDevices = { keyboardOpen: boolean };\r\n\r\nconst initialState: StateDevices = { keyboardOpen: false };\r\n\r\nexport const keyboardSwitch = (b: boolean) => ({\r\n  type: \"devices_keyboardSwitch\" as const,\r\n  payload: b\r\n});\r\n\r\ntype Actions = ReturnType<typeof keyboardSwitch>;\r\n\r\nexport default function reducer(\r\n  state = initialState,\r\n  action: Actions\r\n): StateDevices {\r\n  switch (action.type) {\r\n    case \"devices_keyboardSwitch\":\r\n      return { ...state, keyboardOpen: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { FC, useContext, Fragment, useEffect } from \"react\";\r\nimport { SceneContext } from \"../scene\";\r\nimport {\r\n  AdvancedDynamicTexture,\r\n  InputText,\r\n  VirtualKeyboard,\r\n  Control\r\n} from \"@babylonjs/gui\";\r\nimport { MeshBuilder, Vector3 } from \"@babylonjs/core\";\r\nimport { VRContext } from \"../vr\";\r\nimport Event from \"rx.mini\";\r\nimport { keyboardAction, KeyboardAction } from \"./model\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { keyboardSwitch } from \"../../../redux/devices\";\r\n\r\nexport type OnKeyboardMountProps = {\r\n  keyboardActionEvent: Event<KeyboardAction>;\r\n};\r\n\r\nconst Keyboard: FC<{\r\n  onMount?: (props: OnKeyboardMountProps) => void;\r\n}> = ({ onMount }) => {\r\n  const context = useContext(SceneContext);\r\n  const vrContext = useContext(VRContext);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (context && vrContext) {\r\n      const keyboardActionEvent = new Event<KeyboardAction>();\r\n\r\n      const { scene } = context;\r\n      const { cotrollerActionEvent, vrPositionEvent } = vrContext;\r\n\r\n      const plane = MeshBuilder.CreatePlane(\r\n        \"ui\",\r\n        { width: 1, height: 1 },\r\n        scene as any\r\n      );\r\n      plane.isVisible = false;\r\n\r\n      const advancedTexture = AdvancedDynamicTexture.CreateForMesh(\r\n        plane,\r\n        1024,\r\n        1024\r\n      );\r\n\r\n      const input = new InputText();\r\n      input.width = 0.2;\r\n      input.maxWidth = 0.2;\r\n      input.height = \"40px\";\r\n      input.color = \"white\";\r\n      input.background = \"green\";\r\n      advancedTexture.addControl(input);\r\n\r\n      const keyboard = VirtualKeyboard.CreateDefaultLayout();\r\n      keyboard.verticalAlignment = Control.VERTICAL_ALIGNMENT_BOTTOM;\r\n      advancedTexture.addControl(keyboard);\r\n\r\n      keyboard.connect(input);\r\n\r\n      let textBuffer = input.text;\r\n      input.onTextChangedObservable.add(e => {\r\n        console.log({ e }, input.text);\r\n\r\n        if (input.text === textBuffer.slice(0, -1)) {\r\n          console.log(\"back\");\r\n          keyboardActionEvent.execute(keyboardAction(\"backspace\"));\r\n        } else {\r\n          keyboardActionEvent.execute(keyboardAction(e.currentKey));\r\n        }\r\n        textBuffer = input.text;\r\n      });\r\n\r\n      input.onBlurObservable.add(() => {\r\n        keyboardActionEvent.execute(keyboardAction(\"enter\"));\r\n        input.text = \"\";\r\n        plane.isVisible = false;\r\n        dispatch(keyboardSwitch(plane.isVisible));\r\n      });\r\n\r\n      cotrollerActionEvent.subscribe(async ({ hand }) => {\r\n        if (hand === \"left\") {\r\n          plane.isVisible = !plane.isVisible;\r\n          dispatch(keyboardSwitch(plane.isVisible));\r\n          const { pos, qua } = await vrPositionEvent.asPromise();\r\n          plane.position = pos;\r\n          plane.rotationQuaternion = qua;\r\n          plane.translate(new Vector3(0, 0, 0.6), 1);\r\n        }\r\n      });\r\n\r\n      if (onMount) onMount({ keyboardActionEvent });\r\n    }\r\n  }, [context]);\r\n\r\n  return <Fragment />;\r\n};\r\n\r\nexport default Keyboard;\r\n","import React, { useRef, useState, FC, useEffect } from \"react\";\r\n\r\nimport SceneCreate, { SceneEventArgs } from \"../domain/babylon/scene\";\r\nimport { Vector3, HemisphericLight, FreeCamera } from \"@babylonjs/core\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport { webrtcService } from \"../services/webrtc\";\r\nimport Desktop, { OnDesktopMountProps } from \"../domain/babylon/desktop\";\r\nimport VR, { OnMountProps } from \"../domain/babylon/vr\";\r\nimport Keyboard, { OnKeyboardMountProps } from \"../domain/babylon/keyboard\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ReduxState } from \"../redux\";\r\nimport useSelectorRef from \"../hooks/useSelectorRef\";\r\n\r\nconst App: FC = () => {\r\n  const [room, setroom, clearroom] = useInput();\r\n  const ref = useRef<any>();\r\n  const [stream, setstream] = useState<MediaStream>();\r\n\r\n  const onSceneMount = (e: SceneEventArgs) => {\r\n    const { canvas, scene } = e;\r\n\r\n    new HemisphericLight(\"sunLight\", new Vector3(0, 1, 0), scene);\r\n\r\n    const camera = new FreeCamera(\"camera\", new Vector3(0, 1, -2), scene);\r\n    camera.attachControl(canvas, true);\r\n    (scene.activeCamera as any).beta += 0.8;\r\n  };\r\n\r\n  const keyboardOpenRef = useSelectorRef(\r\n    (store: ReduxState) => store.devices.keyboardOpen\r\n  );\r\n\r\n  const onDesktopMount = (props: OnDesktopMountProps) => {\r\n    const { mouseMoveEvent } = props;\r\n    mouseMoveEvent.subscribe(pos => {\r\n      console.log(\"ref\", keyboardOpenRef.current);\r\n      if (webrtcService.peer && !keyboardOpenRef.current)\r\n        webrtcService.peer.send(JSON.stringify({ type: \"move\", payload: pos }));\r\n    });\r\n  };\r\n\r\n  const connect = async () => {\r\n    await webrtcService.join(\r\n      \"https://aqueous-earth-75182.herokuapp.com/\",\r\n      room,\r\n      false\r\n    );\r\n    clearroom();\r\n    if (webrtcService.peer)\r\n      webrtcService.peer.onAddTrack.subscribe(ms => {\r\n        setstream(ms);\r\n        console.log(ms);\r\n        ref.current.srcObject = ms;\r\n      });\r\n  };\r\n\r\n  const onVRMount = (props: OnMountProps) => {\r\n    const { cotrollerActionEvent } = props;\r\n    cotrollerActionEvent.subscribe(({ hand }) => {\r\n      if (webrtcService.peer && hand === \"right\" && !keyboardOpenRef.current)\r\n        webrtcService.peer.send(JSON.stringify({ type: \"click\" }));\r\n    });\r\n  };\r\n\r\n  const onKeyboardMount = (props: OnKeyboardMountProps) => {\r\n    const { keyboardActionEvent } = props;\r\n    keyboardActionEvent.subscribe(({ key }) => {\r\n      if (webrtcService.peer)\r\n        webrtcService.peer.send(JSON.stringify({ type: \"key\", payload: key }));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: \"flex\" }}>\r\n        <input onChange={setroom} value={room} />\r\n        <button onClick={connect}>connect</button>\r\n      </div>\r\n\r\n      <SceneCreate onSceneMount={onSceneMount} height={400} width={600}>\r\n        <VR onMount={onVRMount}>\r\n          <Keyboard onMount={onKeyboardMount} />\r\n        </VR>\r\n        {stream && (\r\n          <Desktop\r\n            stream={stream}\r\n            ratio={{\r\n              vertical: 2,\r\n              horizontal: 2 * 1.7\r\n            }}\r\n            onMount={onDesktopMount}\r\n          />\r\n        )}\r\n      </SceneCreate>\r\n      <video ref={ref} autoPlay={true} width={100} height={100} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useState } from \"react\";\r\n\r\nexport default function useInput(): [string, (set: any) => void, () => void] {\r\n  const [value, setvalue] = useState(\"\");\r\n  const input = (e: any) => {\r\n    setvalue(e.target.value);\r\n  };\r\n  const clear = () => {\r\n    setvalue(\"\");\r\n  };\r\n\r\n  return [value, input, clear];\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nexport default function useSelectorRef<T>(selector: (state: any) => T) {\r\n  const ref = useRef<T>();\r\n  const select = useSelector(selector);\r\n  useEffect(() => {\r\n    ref.current = select;\r\n  }, [select]);\r\n  return ref;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  createStore as reduxCreateStore,\r\n  applyMiddleware,\r\n  combineReducers\r\n} from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport devices, { StateDevices } from \"./devices\";\r\n\r\nconst rootReducer = combineReducers({ devices });\r\n\r\nexport default function createStore() {\r\n  const store = reduxCreateStore(rootReducer, applyMiddleware(logger));\r\n  return store;\r\n}\r\n\r\nexport interface ReduxState {\r\n  devices: StateDevices;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./pages/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport createStore from \"./redux\";\r\n\r\nconst store = createStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <HashRouter>\r\n      <div>\r\n        <Route exact path=\"/\" component={App} />\r\n      </div>\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}