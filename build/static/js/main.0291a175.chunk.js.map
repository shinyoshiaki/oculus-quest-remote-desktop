{"version":3,"sources":["components/scene/index.tsx","domain/babylon/desktop/index.ts","domain/webrtc/signaling.ts","domain/babylon/vr/index.ts","pages/App.tsx","serviceWorker.ts","index.tsx"],"names":["Scene","scene","engine","canvas","onResizeWindow","_this","resize","onCanvasLoaded","c","this","BABYLON","props","engineOptions","adaptToDeviceRatio","onSceneMount","console","error","window","addEventListener","removeEventListener","_this$props","width","height","opts","Object","objectWithoutProperties","undefined","react_default","a","createElement","assign","ref","React","Component","vertical","horizontal","createDesktop","_x","_x2","_createDesktop","apply","arguments","_callee","e","stream","desktop","mat","videoTexture","event","impact","_mat","regenerator_default","wrap","_context","prev","next","log","CreatePlane","position","rotation","CreateFromStreamAsync","sent","uScale","vScale","diffuseTexture","material","onPointerUp","video","play","Event","scaling","Vector3","hasAlpha","onPointerDown","evt","pickResult","hit","_ref","pickedPoint","x","y","y1","execute","abrupt","stop","join","url","roomId","trickle","socket","client","connect","Promise","resolve","rtc","WebRTC","nodeId","emit","on","makeOffer","data","setSdp","sdp","onSignal","subscribe","onConnect","once","unSubscribe","onData","message","createVR","environment","vrHelper","createDefaultVRExperience","createDeviceOrientationCamera","enableTeleportation","floorMeshes","ground","onControllerMeshLoaded","add","webVRController","onSecondaryButtonStateChangedObservable","state","hand","pressed","PageWithScene","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","peer","asyncToGenerator","mark","address","setState","onAddTrack","srcObject","_ref2","_callee2","_context2","attachControl","activeCamera","beta","createDefaultEnvironment","enableGroundShadow","groundYBias","setMainColor","FromHexString","send","JSON","stringify","type","onBeforeRenderObservable","then","pos","payload","runRenderLoop","render","_this2","style","display","onChange","target","value","onClick","scene_Scene","autoPlay","Boolean","location","hostname","match","ReactDOM","react_router_dom","react_router","exact","path","component","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0291a175.chunk.js","sourcesContent":["import * as BABYLON from \"babylonjs\";\r\nimport React from \"react\";\r\n\r\nexport type SceneEventArgs = {\r\n  engine: BABYLON.Engine;\r\n  scene: BABYLON.Scene;\r\n  canvas: HTMLCanvasElement;\r\n};\r\n\r\nexport type SceneProps = {\r\n  engineOptions?: BABYLON.EngineOptions;\r\n  adaptToDeviceRatio?: boolean;\r\n  onSceneMount?: (args: SceneEventArgs) => void;\r\n  width?: number;\r\n  height?: number;\r\n};\r\n\r\nexport default class Scene extends React.Component<\r\n  SceneProps & React.HTMLAttributes<HTMLCanvasElement>,\r\n  {}\r\n> {\r\n  private scene: BABYLON.Scene = {} as any;\r\n  private engine: BABYLON.Engine = {} as any;\r\n  private canvas: HTMLCanvasElement = {} as any;\r\n\r\n  onResizeWindow = () => {\r\n    if (this.engine) {\r\n      this.engine.resize();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.engine = new BABYLON.Engine(\r\n      this.canvas,\r\n      true,\r\n      this.props.engineOptions,\r\n      this.props.adaptToDeviceRatio\r\n    );\r\n\r\n    let scene = new BABYLON.Scene(this.engine);\r\n    this.scene = scene;\r\n\r\n    if (typeof this.props.onSceneMount === \"function\") {\r\n      this.props.onSceneMount({\r\n        scene,\r\n        engine: this.engine,\r\n        canvas: this.canvas\r\n      });\r\n    } else {\r\n      console.error(\"onSceneMount function not available\");\r\n    }\r\n\r\n    // Resize the babylon engine when the window is resized\r\n    window.addEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.onResizeWindow);\r\n  }\r\n\r\n  onCanvasLoaded = (c: HTMLCanvasElement) => {\r\n    if (c !== null) {\r\n      this.canvas = c;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    // 'rest' can contain additional properties that you can flow through to canvas:\r\n    // (id, className, etc.)\r\n    let { width, height, ...rest } = this.props;\r\n\r\n    let opts: any = {};\r\n\r\n    if (width !== undefined && height !== undefined) {\r\n      opts.width = width;\r\n      opts.height = height;\r\n    }\r\n\r\n    return <canvas {...opts} ref={this.onCanvasLoaded} />;\r\n  }\r\n}\r\n","import { SceneEventArgs } from \"../../../components/scene\";\r\nimport * as BABYLON from \"babylonjs\";\r\nimport { Vector3 } from \"babylonjs\";\r\nimport Event from \"rx.mini\";\r\n\r\nconst vertical = 2;\r\nconst horizontal = 1.7 * 2;\r\n\r\nexport default async function createDesktop(\r\n  e: SceneEventArgs,\r\n  stream: MediaStream\r\n) {\r\n  const { canvas, scene, engine } = e;\r\n\r\n  console.log({ stream });\r\n\r\n  const desktop = BABYLON.MeshBuilder.CreatePlane(\r\n    \"desktop\",\r\n    { width: horizontal, height: vertical },\r\n    scene\r\n  );\r\n  desktop.position = new BABYLON.Vector3(0, 1, 0);\r\n  desktop.rotation = new BABYLON.Vector3(0, 0, 0);\r\n\r\n  const mat = new BABYLON.StandardMaterial(\"mat\", scene);\r\n\r\n  const videoTexture = await BABYLON.VideoTexture.CreateFromStreamAsync(\r\n    scene,\r\n    stream\r\n  );\r\n\r\n  videoTexture.uScale = 1;\r\n  videoTexture.vScale = -1;\r\n\r\n  mat.diffuseTexture = videoTexture;\r\n  desktop.material = mat;\r\n\r\n  scene.onPointerUp = () => {\r\n    videoTexture.video.play();\r\n  };\r\n\r\n  const event = new Event<{ x: number; y: number }>();\r\n  {\r\n    const impact = BABYLON.Mesh.CreatePlane(\"impact\", 1, scene);\r\n    const mat = (impact.material = new BABYLON.StandardMaterial(\r\n      \"impactMat\",\r\n      scene\r\n    ));\r\n    impact.scaling = new Vector3(0.02, 0.02, 0.04);\r\n    mat.diffuseTexture = new BABYLON.Texture(\"textures/impact.png\", scene);\r\n    mat.diffuseTexture.hasAlpha = true;\r\n    impact.position = new BABYLON.Vector3(0, 0, -0.01);\r\n\r\n    scene.onPointerDown = function(evt, pickResult) {\r\n      if (pickResult.hit) {\r\n        const { x, y } = pickResult!.pickedPoint!;\r\n        if (-1.7 < x && x < 1.7) impact.position.x = x;\r\n        if (0 < y && y < 2) impact.position.y = y;\r\n        const y1 = y / vertical;\r\n        event.execute({ x: (x + 1.7) / horizontal, y: 1 - y1 });\r\n      }\r\n    };\r\n  }\r\n\r\n  return event;\r\n}\r\n","import client from \"socket.io-client\";\r\nimport WebRTC from \"webrtc4me\";\r\n\r\nexport function create(url: string, roomId: string, trickle: boolean) {\r\n  const socket = client.connect(url);\r\n  return new Promise<WebRTC>(resolve => {\r\n    const rtc = new WebRTC({ nodeId: \"answer\", trickle });\r\n    socket.emit(\"create\", { roomId });\r\n    socket.on(\"sdp\", (data: { sdp: string }) => {\r\n      console.log({ data });\r\n      rtc.setSdp(data.sdp);\r\n    });\r\n\r\n    const onSignal = rtc.onSignal.subscribe(sdp => {\r\n      console.log({ sdp, roomId });\r\n      socket.emit(\"sdp\", { sdp, roomId });\r\n    });\r\n    rtc.onConnect.once(() => {\r\n      console.log(\"connect\");\r\n      onSignal.unSubscribe();\r\n      resolve(rtc);\r\n    });\r\n    rtc.onData.subscribe(message => {\r\n      console.log({ message });\r\n    });\r\n  });\r\n}\r\n\r\nexport function join(url: string, roomId: string, trickle: boolean) {\r\n  const socket = client.connect(url);\r\n  return new Promise<WebRTC>(resolve => {\r\n    const rtc = new WebRTC({ nodeId: \"offer\", trickle });\r\n    socket.emit(\"join\", { roomId });\r\n    socket.on(\"join\", () => {\r\n      rtc.makeOffer();\r\n    });\r\n    socket.on(\"sdp\", (data: { sdp: string }) => {\r\n      console.log({ data });\r\n      rtc.setSdp(data.sdp);\r\n    });\r\n\r\n    const onSignal = rtc.onSignal.subscribe(sdp => {\r\n      console.log({ sdp, roomId });\r\n      socket.emit(\"sdp\", { sdp, roomId });\r\n    });\r\n    rtc.onConnect.once(() => {\r\n      console.log(\"connect\");\r\n      resolve(rtc);\r\n      onSignal.unSubscribe();\r\n    });\r\n    rtc.onData.subscribe(message => {\r\n      console.log({ message });\r\n    });\r\n  });\r\n}\r\n","import { SceneEventArgs } from \"../../../components/scene\";\r\nimport { EnvironmentHelper, MeshBuilder } from \"babylonjs\";\r\nimport Event from \"rx.mini\";\r\n\r\nexport default function createVR(\r\n  e: SceneEventArgs,\r\n  environment: EnvironmentHelper\r\n) {\r\n  const { canvas, scene, engine } = e;\r\n\r\n  const event = new Event();\r\n\r\n  const vrHelper = scene.createDefaultVRExperience({\r\n    createDeviceOrientationCamera: false\r\n  });\r\n  vrHelper.enableTeleportation({ floorMeshes: [environment.ground!] });\r\n\r\n  vrHelper.onControllerMeshLoaded.add(webVRController => {\r\n    webVRController.onSecondaryButtonStateChangedObservable.add(\r\n      (data, state) => {\r\n        if (webVRController.hand === \"right\") {\r\n          if (data.pressed) {\r\n            event.execute();\r\n          }\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n  return event;\r\n}\r\n","import React from \"react\";\r\nimport * as BABYLON from \"babylonjs\";\r\nimport BabylonScene, { SceneEventArgs } from \"../components/scene\";\r\nimport { History } from \"history\";\r\nimport createDesktop from \"../domain/babylon/desktop\";\r\nimport { join } from \"../domain/webrtc/signaling\";\r\nimport createVR from \"../domain/babylon/vr\";\r\nimport WebRTC from \"webrtc4me\";\r\n\r\nexport default class PageWithScene extends React.Component<\r\n  { history: History },\r\n  { stream?: MediaStream; address: string }\r\n> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { stream: undefined, address: \"\" };\r\n  }\r\n\r\n  peer?: WebRTC;\r\n  ref: any;\r\n\r\n  connect = async () => {\r\n    const peer = await join(\r\n      \"https://aqueous-earth-75182.herokuapp.com/\",\r\n      this.state.address,\r\n      false\r\n    );\r\n    this.peer = peer;\r\n    this.setState({ address: \"\" });\r\n    peer.onAddTrack.subscribe(stream => {\r\n      console.log(stream);\r\n      this.setState({ stream });\r\n      this.ref.srcObject = stream;\r\n    });\r\n  };\r\n\r\n  onSceneMount = async (e: SceneEventArgs) => {\r\n    const { canvas, scene, engine } = e;\r\n\r\n    new BABYLON.HemisphericLight(\r\n      \"sunLight\",\r\n      new BABYLON.Vector3(0, 1, 0),\r\n      scene\r\n    );\r\n\r\n    const camera = new BABYLON.FreeCamera(\r\n      \"camera\",\r\n      new BABYLON.Vector3(0, 1, -5),\r\n      scene\r\n    );\r\n    camera.attachControl(canvas, true);\r\n    (scene.activeCamera as any).beta += 0.8;\r\n\r\n    const environment = scene.createDefaultEnvironment({\r\n      enableGroundShadow: true,\r\n      groundYBias: 1\r\n    });\r\n    environment!.setMainColor(BABYLON.Color3.FromHexString(\"#74b9ff\"));\r\n\r\n    createVR(e, environment!).subscribe(() => {\r\n      if (this.peer) {\r\n        this.peer.send(JSON.stringify({ type: \"click\" }));\r\n      }\r\n    });\r\n\r\n    scene.onBeforeRenderObservable.add(() => {\r\n      if (this.state.stream) {\r\n        createDesktop(e, this.state.stream).then(e =>\r\n          e.subscribe(pos => {\r\n            if (this.peer)\r\n              this.peer.send(JSON.stringify({ type: \"move\", payload: pos }));\r\n          })\r\n        );\r\n        this.setState({ stream: undefined });\r\n      }\r\n    });\r\n\r\n    engine.runRenderLoop(() => {\r\n      if (scene) scene.render();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ display: \"flex\" }}>\r\n          <input onChange={e => this.setState({ address: e.target.value })} />\r\n          <button onClick={this.connect}>connect</button>\r\n        </div>\r\n        <BabylonScene\r\n          onSceneMount={this.onSceneMount}\r\n          height={400}\r\n          width={600}\r\n        />\r\n        <video\r\n          ref={ref => (this.ref = ref)}\r\n          autoPlay={true}\r\n          width={340}\r\n          height={200}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport App from \"./pages/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <div>\r\n      <Route exact path=\"/\" component={App} />\r\n    </div>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}